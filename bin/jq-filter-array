#!/usr/bin/env bash

SCRIPT_NAME="$(basename "$0")"

# Define defaults
INCLUDE_FILTER="--arg includeTerm \"\""
EXCLUDE_FILTER="--arg excludeTerm \"\""

function show_usage {
  echo "Filter a (potentially nested) array to include/exclude entries based on provided terms."
  echo ""
  echo "Usage: $SCRIPT_NAME [OPTIONS] [EXTRA_ARGS]"
  echo ""
  echo "Options:"
  echo "  --include TERM               Include entries that match the provided TERM"
  echo "  --exclude TERM               Exclude entries that match the provided TERM"
  echo "  --extra-jq-script SCRIPT     Append an additional jq script to be executed after the main filtering script"
  echo ""
  echo "  --dry-run                    Display the command that would be run, but don't run it"
  echo "  -h, --help                   Show this help message and exit"
  echo ""
  echo "Eg."
  echo "  $SCRIPT_NAME --include \"foo\""
  echo "  $SCRIPT_NAME --exclude \"bar\""
  echo "  $SCRIPT_NAME --include \"foo\" --exclude \"bar\""
  echo ""
}

# Check if we should show the help/usage details, and process the arguments
if [[ -z "$1" ]]; then
  show_usage
  exit 1
fi
while [[ $# -gt 0 ]]; do
  case "$1" in
    -h|--help)
      show_usage
      exit 0
      ;;
    --include)
      INCLUDE_FILTER="--arg includeTerm \"$2\""
      shift 2  # Remove the option and its argument
      ;;
    --exclude)
      EXCLUDE_FILTER="--arg excludeTerm \"$2\""
      shift 2  # Remove the option and its argument
      ;;
    --extra-jq-script)
      EXTRA_JQ_SCRIPT="| $2"
      shift 2  # Remove the option and its argument
      ;;
    --dry-run)
      DRY_RUN="true"
      shift
      ;;
    *)
      # Capture the extra args
      if [[ -z "$EXTRA_ARGS" ]]; then
        EXTRA_ARGS="$1"
      else
        EXTRA_ARGS+=" $1"
      fi

      # Shift the positional parameters to remove the handled argument
      shift
      ;;
  esac
done

# Check if we have jq
if ! command -v jq &>/dev/null; then
  echo "Error: jq not installed. Please install using your system's package manager, such as brew for macOS, and try again."
  echo ""
  echo "eg."
  echo "  brew install jq"
  exit 1
fi

# Check our filter args are valid
if [[ -z "$INCLUDE_FILTER" && -z "$EXCLUDE_FILTER" ]]; then
  echo "Error: At least one of --include or --exclude must be defined"
  echo "  INCLUDE_FILTER: $INCLUDE_FILTER"
  echo "  EXCLUDE_FILTER: $EXCLUDE_FILTER"
  exit 1
fi

# Show our processed arguments
{
  echo "[$SCRIPT_NAME] Processed args:"
  echo "  INCLUDE_FILTER: $INCLUDE_FILTER"
  echo "  EXCLUDE_FILTER: $EXCLUDE_FILTER"
  echo "  EXTRA_JQ_SCRIPT: $EXTRA_JQ_SCRIPT"
  echo "  EXTRA_ARGS: $EXTRA_ARGS"
  echo ""
} >&2

# Define our main jq script
JQ_FILTER_SCRIPT='
  flatten | map(
    select(tostring | ($includeTerm | length) == 0 or test($includeTerm; "i")) |
    select(tostring | ($excludeTerm | length) == 0 or (test($excludeTerm; "i") | not))
  )'

# Define the final command
JQ_COMMAND="jq $INCLUDE_FILTER $EXCLUDE_FILTER '$JQ_FILTER_SCRIPT $EXTRA_JQ_SCRIPT' $EXTRA_ARGS"

if [[ "$DRY_RUN" == "true" ]]; then
  # Dry run
  echo "[dry-run] $JQ_COMMAND"
else
  # Regular execution
  eval "$JQ_COMMAND"
fi
