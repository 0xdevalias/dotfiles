#!/usr/bin/env sh

# https://cli.github.com/
# https://docs.github.com/en/graphql/overview/explorer
# https://stackoverflow.com/questions/26701538/how-to-filter-an-array-of-objects-based-on-values-in-an-inner-array-with-jq/26701851#26701851
# https://github.com/octokit/core.js#graphql-example
#   TODO: rewrite this so that it uses octokit core, and then maybe do it as a GitHub action/similar?
#   https://github.com/octokit/graphql.js
#   https://github.com/octokit/action.js
#   https://github.com/octokit/request-action
#   https://github.com/actions/toolkit

# Posted solution to:
#   https://stackoverflow.com/questions/55713929/list-all-unresolved-pull-request-comments/66072198#66072198
#   https://github.community/t/state-of-conversation-marked-resolved/14355/3?u=0xdevalias

# Uses the GitHub CLI to call the GitHub GraphQL API to retrieve all unresolved review comments for a given PR.
# Useful for quickly finding unresolved comment threads in large PR's with tons of review comments.

# Note: I contributed the first minimal version of this to the sparkletown/sparkle repo in https://github.com/sparkletown/sparkle/pull/1466

if [ "$#" -eq 2 ]; then
    IFS='/' read -r OWNER REPO <<< "$1"
    PR=$2

    if [ -z "$OWNER" ] || [ -z "$REPO" ]; then
        echo "Error: Invalid repository format. Please use the format <owner>/<repo>."
        exit 1
    fi
elif [ "$#" -eq 3 ]; then
    OWNER=$1
    REPO=$2
    PR=$3
else
    echo "Usage:"
    echo "  Retrieve unresolved review comments"
    echo "    ./gh-pr-unresolved-review-comments <owner/repo> <pr>"
    echo "    ./gh-pr-unresolved-review-comments <owner> <repo> <pr>"
    echo
    echo "  Count of unresolved review comment threads"
    echo "    ./gh-pr-unresolved-review-comments <owner/repo> <pr> | jq length"
    echo "    ./gh-pr-unresolved-review-comments <owner> <repo> | jq length"
    exit 1
fi

gh api graphql -f query="
  query FetchReviewComments {
    repository(owner: \"$OWNER\", name: \"$REPO\") {
      pullRequest(number: $PR) {
        url
        reviewDecision
        reviewThreads(first: 100) {
          edges {
            node {
              isResolved
              isOutdated
              isCollapsed
              comments(first: 100) {
                totalCount
                nodes {
                  author {
                    login
                  }
                  body
                  url
                }
              }
            }
          }
        }
      }
    }
  }
" | jq '.data.repository.pullRequest.reviewThreads.edges | map(select(.node.isResolved == false))'
