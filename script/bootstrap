#!/usr/bin/env zsh
#
# bootstrap installs things.

cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)

# This is a workaround for install scripts/etc that expect this env var to be set
export ZSH="$DOTFILES_ROOT"

set -e

info () {
  printf "\r  [ \033[00;34m..\033[0m ] $1\n"
}

user () {
  printf "\r  [ \033[0;33m??\033[0m ] $1\n"
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

confirm () {
  local prompt_label_text="${1:-Do you want to continue?}"
  local response

  user " - $prompt_label_text [y/n]: \c"
  read -k 1 response
  echo

  if [[ "$response" =~ [yY] ]]; then
    # This is a return code, so 0 means success (or in this case, continue)
    return 0
  else
    # This is a return code, so non-0 means 'failure' (or in this case, don't continue)
    return 1
  fi
}

# Example Usage: local foo=$(read_user_input "Some prompt text" "default response")
read_user_input () {
  local prompt_label_text="${1:-Enter a value}"
  local default_value="$2"
  local response

  local prompt_text
  if [ -n "$default_value" ]; then
    prompt_text=" - $prompt_label_text [$default_value]: \c"
  else
    prompt_text=" - $prompt_label_text: \c"
  fi

  # We output the prompt to the error channel here so we can capture the later echo as the function 'return value'
  user "$prompt_text" >&2
  read response
  response=${response:-$default_value}

  echo "$response"
}

setup_computer_name () {
  info 'setup computer name'

  local did_change_something="false"

  read_and_update_scutil_key () {
    local scutil_key="$1"
    local prompt_label_text=${2:-$scutil_key}
    local old_name="$(scutil --get $scutil_key 2>&1)"
    local new_name="$(read_user_input "$prompt_label_text" "$old_name")"

    if [ "$old_name" != "$new_name" ]; then
      did_change_something="true"

      scutil --set $scutil_key "$new_name"

      success "$scutil_key set to $new_name"
    else
      success "$scutil_key not modified"
    fi
  }

  read_and_update_scutil_key "ComputerName"
  read_and_update_scutil_key "LocalHostName"
  read_and_update_scutil_key "HostName" "HostName (usually leave this blank)"

  if [ "$did_change_something" = "true" ]; then
    # Flush the DNS cache:
    dscacheutil -flushcache
    success "DNS cache flushed"
  fi

  success "computer name configured"
}

# We have to ensure we install homebrew before trying to run any scripts that rely on it.. which probably means doing so pretty early on..
setup_homebrew_mas () {
  info 'setup homebrew / mas'

  # Install homebrew / mas
  echo "â€º $DOTFILES_ROOT/homebrew/install.sh"
  $DOTFILES_ROOT/homebrew/install.sh 2>&1
}

setup_keybase () {
  info 'setup keybase'

  $DOTFILES_ROOT/keybase/install.sh

  success 'keybase configured'
}

# TODO: make setup_gpg optional? Ask user anything?
setup_gpg () {
  # TODO: If we move the gpg-agent.conf to gpg-agent.conf.example + fix the sed command in install to write the real one
  #   then we could check if it exists here, and not run this if we don't need to?
  # if ! [ -f git/gitconfig.local.symlink ]
  # then
  info 'setup gpg'

  $DOTFILES_ROOT/gpg/install.sh

  success 'gpg configured'
}

setup_gitconfig () {
  info 'configuring gitconfig.local'

  local gitconfig_local_example_path="$DOTFILES_ROOT/git/gitconfig.local.symlink.example"
  local gitconfig_local_path="$DOTFILES_ROOT/git/gitconfig.local.symlink"

  local git_credential='cache'
  if [ "$(uname -s)" = "Darwin" ]; then
    git_credential='osxkeychain'
  fi

  local old_git_name="$(git config --get user.name)"
  local old_git_email="$(git config --get user.email)"

  local git_authorname="$(read_user_input "What is your GitHub author name?" "$old_git_name")"
  local git_authoremail="$(read_user_input "What is your GitHub author email?" "$old_git_email")"

  if ! [ -f "$gitconfig_local_path" ]; then
    # If the file hasn't been setup yet, then create and configure it
    sed -e "s/AUTHORNAME/$git_authorname/g"\
        -e "s/AUTHOREMAIL/$git_authoremail/g"\
        -e "s/GIT_CREDENTIAL_HELPER/$git_credential/g"\
        "$gitconfig_local_example_path" > "$gitconfig_local_path"

    success "Created $gitconfig_local_path"
  else
    # Otherwise, update the existing file directly
    git config --file "$gitconfig_local_path" --replace-all user.name "$git_authorname"
    git config --file "$gitconfig_local_path" --replace-all user.email "$git_authoremail"
    git config --file "$gitconfig_local_path" --replace-all credential.helper "$git_credential"

    success "Updated $gitconfig_local_path"
  fi

  # TODO: configure git commit signing
  # gpg --list-secret-keys --keyid-format LONG
  # git config --file ~/.gitconfig.local --replace-all user.signingkey THE16CHARKEYID

  echo "TODO: Setup commit signing automagically https://github.com/pstadler/keybase-gpg-github"

  echo "TODO: Setup commit signing https://github.com/pstadler/keybase-gpg-github"

  success 'gitconfig.local configured'
}

setup_github_gh () {
  info 'setup GitHub CLI (gh)'

  # Install gh + related tools + authenticate the GitHub CLI + set up git SSH key
  $DOTFILES_ROOT/git/install.sh

  success 'GitHub CLI (gh) configured'
}

setup_dotfiles_git_remote_ssh () {
  info 'configure dotfiles git remote'

  local dotfiles_git_repo='0xdevalias/dotfiles'

  user " - What is your dotfiles GitHub repo name [$dotfiles_git_repo]: \c"
  read new_dotfiles_git_repo
  dotfiles_git_repo=${new_dotfiles_git_repo:-$dotfiles_git_repo}

  local dotfiles_git_origin="git@github.com:${dotfiles_git_repo}.git"

  user " - What git remote URL should we use for the dotfiles repo [$dotfiles_git_origin]: \c"
  read new_dotfiles_git_origin
  dotfiles_git_origin=${new_dotfiles_git_origin:-$dotfiles_git_origin}

  git --git-dir "$DOTFILES_ROOT/.git" remote set-url origin "$dotfiles_git_origin"

  git --git-dir "$DOTFILES_ROOT/.git" remote -v

  success 'dotfiles git remote configured'
}

setup_ssh_key_init () {
  local ssh_key_path="$HOME/.ssh"
  local keys_init_path="$DOTFILES_ROOT/ssh/keys.init"
  local existing_keys=""
  local keys_for_init

  info "configure $keys_init_path"

  info "The following files exist in $ssh_key_path"
  ls -L "$ssh_key_path"

  if [ -e "$keys_init_path" ]; then
    existing_keys=$(cat "$keys_init_path")

    info "The following key names currently exist in $keys_init_path:"
    info "  $existing_keys"
  else
    info "There are currently no key names in $keys_init_path"
  fi

  user " - Which key names would you like to add to keys.init for ssh-keyinit (separate with spaces, this will overwrite all existing key names) [$existing_keys]: \c"
  read keys_for_init

  keys_for_init=${keys_for_init:-$existing_keys}

  if [ -n "$keys_for_init" ]; then
    echo "$keys_for_init" > "$keys_init_path"
    success "Wrote key names to $keys_init_path:"
    cat "$keys_init_path"
  else
    success 'No key names to configure'
  fi

  success "$keys_init_path configured"
}


link_file () {
  local src=$1 dst=$2

  local overwrite= backup= skip= skipped_because_already_matching_linked=
  local action=

  if [ -f "$dst" -o -d "$dst" -o -L "$dst" ]
  then

    if [ "$overwrite_all" = "false" ] && [ "$backup_all" = "false" ] && [ "$skip_all" = "false" ]
    then

      local currentSrc="$(readlink $dst)"

      if [ "$currentSrc" = "$src" ]
      then

        skip=true;
        skipped_because_already_matching_linked=true;

      else

        user "File already exists: $dst ($(basename "$src")), what do you want to do?\n\
        [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac

      fi

    fi

    overwrite=${overwrite:-$overwrite_all}
    backup=${backup:-$backup_all}
    skip=${skip:-$skip_all}

    if [ "$overwrite" = "true" ]
    then
      rm -rf "$dst"
      success "removed $dst"
    fi

    if [ "$backup" = "true" ]
    then
      mv "$dst" "${dst}.backup"
      success "moved $dst to ${dst}.backup"
    fi

    if [ "$skip" = "true" ]
    then
      if [ "$skipped_because_already_matching_linked" = "true" ]
      then
        success "auto-skipped (already linked properly) $src"
      else
        success "skipped $src"
      fi
    fi
  fi

  if [ "$skip" != "true" ]  # "false" or empty
  then
    ln -s "$1" "$2"
    success "linked $1 to $2"
  fi
}

install_dotfiles () {
  info 'installing dotfiles'

  local overwrite_all=false backup_all=false skip_all=false

  for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name '*.symlink' -not -path '*.git*')
  do
    dst="$HOME/.$(basename "${src%.*}")"
    link_file "$src" "$dst"
  done
}

echo ''

setup_computer_name

echo ''

# We have to ensure we install homebrew before trying to run any scripts that rely on it..
setup_homebrew_mas

echo ''

# TODO: move setup_gpg after setup_gitconfig (or part of it?) and make it conditionally enable commit signing?
setup_gpg

echo ''

setup_keybase

echo ''

setup_gitconfig

echo ''

setup_github_gh

echo ''

setup_dotfiles_git_remote_ssh

echo ''

setup_ssh_key_init

echo ''

install_dotfiles

# # If we're on a Mac, let's install and setup homebrew.
# if [ "$(uname -s)" == "Darwin" ]
# then
#   info "installing dependencies"
#   if source bin/dotfiles-dot 2>&1 | tee /tmp/dotfiles-dot
#   then
#     success "dependencies installed"
#   else
#     fail "error installing dependencies"
#   fi
# fi

echo ''
echo '  All installed!'
